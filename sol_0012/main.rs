#[macro_use] extern crate libeuler;
use libeuler::prime::SieveOfAtkin;
use std::collections::HashMap;


/// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle
/// number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
///
/// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
///
/// Let us list the factors of the first seven triangle numbers:
///
///     1: 1
///     3: 1,3
///     6: 1,2,3,6
///    10: 1,2,5,10
///    15: 1,3,5,15
///    21: 1,3,7,21
///    28: 1,2,4,7,14,28
///
/// We can see that 28 is the first triangle number to have over five divisors.
///
/// What is the value of the first triangle number to have over five hundred divisors?
fn main() {
    solutions!{
        inputs: (divisors: u64 = 500)

        sol naive {
            let sieve = SieveOfAtkin::new(2_000_000);
            for num in TriangleNumberIterator::new() {
                let factors = sieve.factorize(num);

                let counts = factors.iter().fold(HashMap::new(), |mut m, &f| {
                    let v = m.remove(&f).unwrap_or(0);
                    m.insert(f, v+1);

                    m
                }).values().fold(1, |c, &v| {
                    c * (v + 1)
                });

                if counts > divisors {
                    return num;
                }
            }

            unreachable!();
        }
    };
}

struct TriangleNumberIterator {
    num: u64,
    val: u64
}

impl TriangleNumberIterator {
    fn new() -> TriangleNumberIterator {
        TriangleNumberIterator {
            num: 0,
            val: 1
        }
    }
}

impl Iterator for TriangleNumberIterator {
    type Item = u64;

    fn next(&mut self) -> Option<u64> {
        self.num += self.val;
        self.val += 1;

        Some(self.num)
    }
}
