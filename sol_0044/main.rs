#[macro_use] extern crate libeuler;

/// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers
/// are:
///
/// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
///
/// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is
/// not pentagonal.
///
/// Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are
/// pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
fn main() {
    solutions! {
        sol naive {
            let mut mindist = None;
            for k in 1..10_000 {
                let pk = (k * (3*k - 1)) / 2;
                for j in k..10_000 {
                    let pj = (j * (3*j - 1)) / 2;

                    if is_pentagonal(pj - pk) {
                        if is_pentagonal(pk + pj) {
                            let d = (pk - pj).abs();
                            mindist = match mindist {
                                Some(dist) => Some(if d > dist { d } else { dist }),
                                None => Some(d)
                            };
                        }
                    }
                }
            }

            mindist.unwrap()
        }
    }
}

/// x = (n(3n - 1))/2
/// 2x = n(3n - 1)
/// 2x = 3n^2 - n
/// 24x = 36n^2 - 12n
/// 24x + 1 = 36n^2 - 12n + 1
/// 24x + 1 = (6n - 1)^2
/// sqrt(24x + 1) = 6n - 1
/// 6n = sqrt(24x + 1) - 1
/// n = 1/6(sqrt(24x + 1) + 1)
fn is_pentagonal(i: i64) -> bool {
    let v = (1.0/6.0) * ((24.0 * (i as f64) + 1.0).sqrt() + 1.0);

    v.floor() == v
}
