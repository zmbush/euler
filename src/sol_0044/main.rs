#[macro_use] extern crate libeuler;

use libeuler::traits::PolygonalNumber;
/// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers
/// are:
///
/// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
///
/// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is
/// not pentagonal.
///
/// Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are
/// pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
fn main() {
    solutions! {
        sol naive {
            let mut mindist = None;
            for k in 1i64..10_000 {
                let pk = (k * (3*k - 1)) / 2;
                for j in k..10_000 {
                    let pj = (j * (3*j - 1)) / 2;

                    if (pj - pk).is_pentagonal() && (pj + pk).is_pentagonal() {
                        let d = (pk - pj).abs();
                        mindist = match mindist {
                            Some(dist) => Some(if d > dist { d } else { dist }),
                            None => Some(d)
                        };
                    }
                }
            }

            mindist.unwrap()
        }
    }
}
